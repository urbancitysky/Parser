import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;
/**
 * CECS444 Assignment 6 Final Parser
 * Date: 05-13-2013
 * @author Shih Kai Chen
 * An
 */
public class FinalParser_v6{
	private int state, token_number,stacktop,table_entry;
	private int current_read;
	//	private int state;
	private char current_char;
	private boolean buffered;
	private String token_under_construction;
	
	
	public FinalParser_v6(String _token_under_construction, int _current_read, int _state){
		token_under_construction = _token_under_construction;
		current_read = _current_read;
		state = _state;
	}
	void read_characters(String filename){
		try{
			current_char = ' ';
			char ReadChar[] = new char[1];
			
			buffered = false;
			boolean boolExit = false;
			Stack<Integer> S = new Stack<Integer>();
			BufferedReader file_in = new BufferedReader(new FileReader(filename));
			
			
			S.push(1);
			while(file_in.ready()){
				if((!buffered)||(current_char == ' ')||(current_char == '\n')||current_char == '\r'){
					file_in.read(ReadChar);
					current_char = ReadChar[0];	// reset to S0
				}
				if(Character.isLetter(current_char))
					current_read = 0;
				else if(Character.isDigit(current_char))
					current_read = 1;
				else if (Character.isSpaceChar(current_char))
					current_read = 20;
				else{
					switch(current_char){
					case '$':
						current_read = 2;break;
					case '.':
						current_read = 3;break;
					case ',':
						current_read = 4;break;
					case '[':
						current_read = 5;break;
					case ']':
						current_read = 6;break;
					case '"':
						current_read = 7;break;
					case '/':
						current_read = 8;break;
					case '_':
						current_read = 9;break;
					case '+':
						current_read = 10;break;
					case '-':
						current_read = 11;break;
					case '<':
						current_read = 12;break;
					case '>':
						current_read = 13;break;
					case '!':
						current_read = 14;break;
					case '=':
						current_read = 15;break;
					case ':':
						current_read = 16;break;
					case '^':
						current_read = 17;break;
					case '\n':
						current_read = 18;break;
					case '*':
						current_read = 19;break;
					case '@':
						current_read = 22;break;
					case '&':
						current_read = 22;break;
					case '#':
						current_read = 21;break;
					case '~':
						current_read = 22;break;
					case '\t':
						current_read = 20;break;
					case '\'':
						current_read = 22;break;
					case ';':
						current_read = 23;break;
					case '(':
						current_read = 23;break;
					case ')':
						current_read = 24;break;
					case '{':
						current_read = 26;break;
					case '}':
						current_read = 27;break;
					default:
						current_read = 28;break;
					}// switch case
				}// end if

				if((next_state(state,current_read)!=-1) && (action(state,current_read)==1)){
					buffered = false;
					token_under_construction=token_under_construction+current_char;
					state= next_state(state,current_read);
				}else if (( next_state(state,current_read)==-1)&&(action(state,current_read)==2)){
					buffered = true;
					// 1 = Identfier, 2 = Integer, 3 = Real, 4 = Currency, 
					// 5 = Library Token, 6 = Scientific Notaion, 7 = Device or File, 
					// 8 = String Literal, 9 = Comment Token, 10 = Simple Operator, 
					// 11 = Compound Operator
					switch(look_up(state,current_read)){
					case 1:
						switch(token_under_construction){
						case"program":
							token_number=-2;break;
						case"var":
							token_number=-5;break;
						case "begin":
							token_number=-13;break;
						case"real":
							token_number=-9;break;
						case"to":
							token_number=-19;break;
						case"abs":
							token_number=-44;break;
						case"end":
							token_number=-30;break;
						case"return":
							token_number=-14;break;
						case"until":
							token_number=-22;break;
						case"for":
							token_number=-18;break;
						case"repeat":
							token_number=-21;break;
						case"while":
							token_number=-25;break;
						case"if":
							token_number=-26;break;
						case"do":
							token_number=-20;break;
						case"then":
							token_number=-46;break;
						case"stop":
							token_number=-27;break;
						case"read":
							token_number=-33;break;
						case"println":
							token_number=-32;break;
						case"else":
							token_number=-28;break;
						default: 
							token_number=-3;
						}
						System.out.println(token_under_construction+"\t\t--> ID");
						break;
					case 2:
						System.out.println(token_under_construction+"\t\t--> Valid integer");
						token_number=-8;
						
						break;
					case 3:
						System.out.println(token_under_construction+"\t\t--> Valid real number" );
						token_number=-9;
						break;
					case 4:
						System.out.println(token_under_construction+"\t\t--> Valid currency" );
						token_number=-11;
						break;
					case 5:
						System.out.println(token_under_construction +"\t--> Library Token ");
						token_number=-1;
						break;
					case 6:
						System.out.println(token_under_construction +"\t\t--> Valid scientific number");
						token_number=-10;
						break;
					case 7:
						System.out.println(token_under_construction + "\t\t--> File token" );

						switch(token_under_construction){
						case"write_to _devicefiletoken":
							token_number=-31;break;
						case"device_openfiletokens":
							token_number=-16;break;
						case"device_closefiletoken":
							token_number=-29;break;
						case"read_from_devicefiletoken":
							token_number=-30;break;
						}
						break;
					case 8:
						System.out.println(token_under_construction + "\t\t--> Valid string literal" );
						token_number=-12;
						break;
					case 9:
						System.out.println(token_under_construction + "\t\t--> --> Comment Token");
						token_number=-4;
						break;
					case 10:
						System.out.println(token_under_construction + "\t\t--> Simple Operator " );
						switch(token_under_construction){
						case ";":
							token_number=-4;break;
						case ":=":
							token_number=-6;break;
						case ",":
							token_number=-7;break;
						case ":":
							token_number=-10;break;
						case "(":
							token_number=-11;break;
						case ")":
							token_number=-12;break;
						case "<":
							token_number=-34;break;
						case ">":
							token_number=-35;break;
						case "+":
							token_number=-40;break;
						case "-":
							token_number=-41;break;
						case "*":
							token_number=-42;break;
						case "/":
							token_number=-43;break;
						default: 
							break;
						}
						break;
					case 11:
						System.out.println(token_under_construction + "\t\t--> Compound Operator" );
						switch(token_under_construction){
						case ":=":
							token_number=-15;break;
						case "<=":
							token_number=-36;break;
						case ">=":
							token_number=-37;break;
						case "==":
							token_number=-38;break;
						case "!=":
							token_number=-39;break;
						default: 
//							token_number=-4;
							break;
						}
						break;
					case 12:
						break;
					default:
						System.out.println("error");
						break;
					}
					
					stacktop = S.peek();
					if(stacktop > 0){
						table_entry = next_table_entry(stacktop,Math.abs(token_number));
						switch(table_entry){
						case 1:
							System.out.println("Fire 1");
							stacktop = S.pop();
							S.push(4); S.push(2); S.push(3);
							break;
						case 2:
							System.out.println("Fire 2");
							stacktop = S.pop();		
							S.push(4);
							break;
						case 3:
							System.out.println("Fire 3");
							stacktop = S.pop();
							S.push(2); S.push(3); 
							break;
						case 4:
							System.out.println("Fire 4");
							stacktop = S.pop();
							break;
						case 5:
							System.out.println("Fire 5");
							stacktop = S.pop();
							S.push(-1);
							break;
						case 6:
							System.out.println("Fire 6");
							stacktop = S.pop();
							S.push(5); 
							break;
						case 7:
							System.out.println("Fire 7");
							stacktop = S.pop();
							break;
						case 8:
							System.out.println("Fire 8");
							stacktop = S.pop();
							S.push(23);S.push(12);S.push(6);S.push(-4);S.push(-3);S.push(-2);
							break;
						case 9:
							System.out.println("Fire 9");
							stacktop = S.pop();
							S.push(7);S.push(-4);S.push(-11);S.push(-6);S.push(8);S.push(-5);
							break;
						case 10:
							System.out.println("Fire 10");
							stacktop = S.pop();
							S.push(7);S.push(-4);S.push(-11);S.push(-6);S.push(8);
							break;
						case 11:
							System.out.println("Fire 11");
							stacktop = S.pop();
							break;
						case 12:
							System.out.println("Fire 12");
							stacktop = S.pop();
							S.push(9);S.push(10);
							break;
						case 13:
							System.out.println("Fire 13");
							stacktop = S.pop();
							S.push(9);S.push(10);S.push(-7);
							break;
						case 14:
							System.out.println("Fire 14");
							stacktop = S.pop();
							break;
						case 15:
							System.out.println("Fire 15");
							stacktop = S.pop();
							S.push(-3);
							break;
						case 16:
							System.out.println("Fire 16");
							stacktop = S.pop();
							S.push(-8);
							break;
						case 17:
							System.out.println("Fire 17");
							stacktop = S.pop();
							S.push(-9);
							break;
						case 18:
							System.out.println("Fire 18");
							stacktop = S.pop();
							//18. <statemen_ tail¡r -->  £f
							S.push(-10);
							break;
						case 19:
							System.out.println("Fire 19");
							stacktop = S.pop();
							S.push(-11);
							break;
						case 20:
							System.out.println("Fire 20");
							stacktop = S.pop();
							S.push(-12);
							break;
						case 21:  
							System.out.println("Fire 21");
							stacktop = S.pop();
							S.push(-4);S.push(-8);S.push(-14);S.push(13);S.push(-13);
							break;
						case 22:
							System.out.println("Fire 22");
							stacktop = S.pop();						
							S.push(14);S.push(15);
							break;
						case 23:
							System.out.println("Fire 23");
							stacktop = S.pop();
							S.push(14);S.push(15);
							break;
						case 24:
							System.out.println("Fire 24");
							stacktop = S.pop();
							break;
						case 25:
							System.out.println("Fire 25");
							S.push(-4);S.push(-18);S.push(-15);S.push(-3);
							break;
						case 26:
							System.out.println("Fire 26");
							stacktop = S.pop();
							//25. <statement> --> read_from_device <filetoken>;
							// -45 -8	
							//-8 -45
							S.push(-4);S.push(-17);S.push(-16);
							break;
						case 27:
							System.out.println("Fire 27");
							stacktop = S.pop();
							S.push(-4);S.push(-20);S.push(23);S.push(13);S.push(-20);S.push(-3);S.push(-19);S.push(-3);S.push(-15);S.push(-3);S.push(-18);
							break;
						case 28:
							System.out.println("Fire 28");
							stacktop = S.pop();
							S.push(-4);S.push(-20);S.push(23);S.push(-24);S.push(16);S.push(-23);S.push(-22);S.push(13);S.push(20);S.push(-21);
							break;
						case 29:
							System.out.println("Fire 29");
							stacktop = S.pop();
							S.push(-4);S.push(-20);S.push(23);S.push(13);S.push(-20);S.push(-24);S.push(16);S.push(-23);S.push(-25);
							break;
						case 30:
							System.out.println("Fire 30");
							stacktop = S.pop();
							S.push(-4);S.push(23);S.push(13);S.push(-28);S.push(-4);S.push(-23);S.push(13);S.push(-13);S.push(-27);S.push(-24);S.push(16);S.push(-23);S.push(-26);
							break;
						case 31:
							System.out.println("Fire 31");
							stacktop = S.pop();
							S.push(-4);S.push(-17);S.push(-29);
							break;
						case 32:
							System.out.println("Fire 32");
							stacktop = S.pop();
							S.push(-4);S.push(-17);S.push(-30);
							break;
						case 33:
							System.out.println("Fire 33");
							stacktop = S.pop();
							//32. <relational_op> --> <= 
							//-15
							S.push(-4);S.push(-17);S.push(-31);
							break;
						case 34:
							System.out.println("Fire 34");
							stacktop = S.pop();
							//<relational_op> --> >= 
							//-16
							S.push(-4);S.push(-24);S.push(18);S.push(-23);S.push(-32);
							break;
						case 35:
							System.out.println("Fire 35");
							stacktop = S.pop();
							//<relational_op> --> == 
							// -17
							S.push(-4);S.push(-24);S.push(18);S.push(-23);S.push(-33);
							break;
						case 36:
							System.out.println("Fire 36");
							stacktop = S.pop();
							//<relational_op> --> !=
							//-18
							S.push(18);S.push(17);S.push(18);
							break;
						case 37:
							System.out.println("Fire 37");
							stacktop = S.pop();
							//<expressionGversion2> --> <primary> <primary_tail> 
							//19 20
							//20 19
							S.push(-34);
							break;
						case 38:
							System.out.println("Fire 38");
							stacktop = S.pop();
							//37. <expressionGversion2> --> stringliteral
							//-27
							S.push(-35);
							break;
						case 39:
							System.out.println("Fire 39");
							stacktop = S.pop();
							//38. <primary_tail> --> + <primary><pnmary_tail> 
							//-19 19 18 
							//18 19 -19
							S.push(-36);
							break;
						case 40:
							System.out.println("Fire 40");
							stacktop = S.pop();
							//39. <primary_tail> --> - <primary> <primary__tail> 
							//-20 19 18
							// 18 19 -20
							S.push(-37);
							break;
						case 41:
							System.out.println("Fire 41");
							stacktop = S.pop();
							//<primary_tail> -->  £f
							S.push(-38);
							break;
						case 42:
							System.out.println("Fire 42");
							stacktop = S.pop();
							//<primary>  --> <secondary> <secondary_tail>
							// 21 20
							//20 21
							S.push(-39);
							break;
						case 43:
							System.out.println("Fire 43");
							stacktop = S.pop();
							//42. <secondary_tail> --> * <secondary><secondary_tail> 
							// -21 21 20
							// 20 21 -21
							S.push(19);S.push(20);
							break;
						case 44:
							System.out.println("Fire 44");
							stacktop = S.pop();
							S.push(-12);
							break;
						case 45:
							System.out.println("Fire 45");
							stacktop = S.pop();
							S.push(19);S.push(20);S.push(-40);
							break;
						case 46:
							System.out.println("Fire 46");
							stacktop = S.pop();
							S.push(19);S.push(20);S.push(-41);
							break;
						case 47:
							System.out.println("Fire 47");
							stacktop = S.pop();
							break;
						case 48:
							System.out.println("Fire 48");
							stacktop = S.pop();
							//<secondary> --> int 
							// -23
							S.push(21);S.push(22);
							break;
						case 49:
							System.out.println("Fire 49");
							stacktop = S.pop();
							//<secondary> --> real 
							// -24
							S.push(21);S.push(22);S.push(-42);
							break;
						case 50:
							System.out.println("Fire 50");
							stacktop = S.pop();
							//<secondary> --> scientific 
							// -25
							S.push(21);S.push(22);S.push(-43);
							break;
						case 51:
							System.out.println("Fire 51");
							stacktop = S.pop();
							break;
						case 52:
							System.out.println("Fire 52");
							stacktop = S.pop();
							S.push(-24);S.push(18);S.push(-23);
							break;
						case 53:
							System.out.println("Fire 53");
							stacktop = S.pop();
							S.push(-3);
							break;
							
						case 54:
							System.out.println("Fire 54");
							stacktop = S.pop();
							S.push(-8);
							break;
						case 55:
							System.out.println("Fire 55");
							stacktop = S.pop();
							S.push(-19);
							break;
						case 56:
							System.out.println("Fire 56");
							stacktop = S.pop();
							S.push(-10);
							break;
						case 57:
							System.out.println("Fire 57");
							stacktop = S.pop();
							S.push(-11);
							break;
						case 58:
							System.out.println("Fire 58");
							stacktop = S.pop();
							S.push(-24);S.push(18);S.push(-23);S.push(-44);
							break;
						case 59:
							System.out.println("Fire 59");
							stacktop = S.pop();
							S.push(-24);S.push(18);S.push(-23);S.push(-45);
							break;
						case 60:
							System.out.println("Fire 60");
							stacktop = S.pop();
							S.push(-46);
							break;
						case 61:
							System.out.println("Scan error --> " + token_under_construction);
							//scan error occurs, goto next token directly
							break;
						case 62:
							System.out.println("Pop error");
							//pop error occurs, take out one # from stack
							stacktop = S.pop();
							break;
						default:
							System.out.println("parse error");
							break;
						}//end switch
						System.out.println(stacktop +" , "+ token_number);
						System.out.println("-------------------------------------");

					}else if(stacktop == token_number){
						System.out.println("Match and pop \t\t" + token_under_construction);
						stacktop = S.pop();
						System.out.println(stacktop +" , "+ token_number);
						System.out.println("-------------------------------------");
						state =0;
						token_under_construction="";
					}else{
						System.out.println(stacktop +" , "+ token_number);
						System.out.println("-------------------------------------");
						System.out.println("parse error2");
					}

					state =0;
					token_under_construction="";
//					System.out.println("\t\tnTokenIndex = "+nTokenIndex);

				}
				
				if(boolExit) break;
				if(!file_in.ready()) boolExit = true;
			}

			System.out.println("Match and pop " + token_under_construction+"\nAccept");
			
			file_in.close();

		}catch(Exception e){
		}
	}

	int next_table_entry(int _non_terminal, int _token){
		int parse_table[][]={
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,2,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61},
				{0,3,4,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,4},
				{0,5,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61},
				{0,62,6,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,7},
				{0,62,8,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61},
				{0,62,62,62,62,9,62,62,62,62,62,62,62,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62},
				{0,62,62,10,62,62,62,62,62,62,62,62,62,11,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62},
				{0,62,62,12,62,62,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62},
				{0,62,62,62,62,62,14,13,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,14,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62},
				{0,62,62,15,62,62,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62},
				{0,62,62,62,61,62,62,62,16,17,18,19,20,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62},
				{0,62,62,62,62,62,62,62,62,62,62,62,62,21,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61,62},
				{0,62,62,22,62,62,62,62,62,62,62,62,62,62,61,62,22,62,22,62,62,22,61,62,62,22,22,62,62,22,22,22,22,22,62,62,62,62,62,62,62,62,62,62,62,62,61,62},
				{0,62,62,23,62,62,62,62,62,62,62,62,62,62,24,62,23,62,23,62,62,23,24,62,62,23,23,62,62,23,23,23,23,23,62,62,62,62,62,62,62,62,62,62,62,62,24,62},
				{0,62,62,25,62,62,62,62,62,62,62,62,62,62,61,62,26,62,27,62,62,28,61,62,62,29,30,62,62,31,32,33,34,35,62,62,62,62,62,62,62,62,62,62,62,62,61,62},
				{0,62,62,36,62,62,62,62,36,36,36,36,36,62,62,62,62,62,62,62,62,62,62,36,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,36,36,62,62},
				{0,62,62,61,62,62,62,62,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,61,62,62,62,62,62,62,62,62,62,62,37,38,39,40,41,42,62,62,62,62,61,61,62,62},
				{0,62,62,43,61,62,62,62,43,43,43,43,44,62,62,62,62,62,62,62,62,62,62,43,61,62,62,62,62,62,62,62,62,62,61,61,61,61,61,61,62,62,62,62,43,43,62,62},
				{0,62,62,62,47,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,47,62,62,62,62,62,62,62,62,62,47,47,47,47,47,47,45,46,62,62,62,62,62,62},
				{0,62,62,48,61,62,62,62,48,48,48,48,62,62,62,62,62,62,62,62,62,62,62,48,61,62,62,62,62,62,62,62,62,62,61,61,61,61,61,61,61,61,62,62,48,48,62,62},
				{0,62,62,62,51,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,51,62,62,62,62,62,62,62,62,62,51,51,51,51,51,51,51,51,49,50,62,62,62,62},
				{0,62,62,53,61,62,62,62,54,55,56,57,62,62,62,62,62,62,62,62,62,62,62,52,61,62,62,62,62,62,62,62,62,62,61,61,61,61,61,61,61,61,61,61,58,59,62,62},
				{0,62,62,62,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,60,61},

		};
		return parse_table[_non_terminal][_token];
	}
	private int next_state(int new_state, int new_char){
		int state_table[][] = { 
				{1,60,46,58,7,31,7,15,25,7,8,21,10,11,12,13,14,7,-1,7,98,38,7,7,85,7,17,7,-1},
				{1,2,-1,4,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{2,2,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{2,2,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{5,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,6,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,9,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{15,15,-1,-1,-1,-1,-1,16,-1,-1,-1,-1,-1,-1,15,-1,-1,-1,-1,-1,15,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{18,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,18,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{23,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{23,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,26,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,28,26,26,26,26,26,26,26,26,26},
				{27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,29,27,27,27,27,27,27,27,27,27,27},
				{-1,-1,-1,-1,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{34,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{34,34,-1,35,-1,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{36,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{36,36,-1,-1,-1,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{39,39,-1,-1,-1,-1,-1,40,-1,-1,-1,-1,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{42,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{42,42,-1,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{44,44,-1,-1,-1,-1,-1,45,-1,-1,-1,-1,-1,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,50,-1,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,55,-1,47,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,47,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,56,-1,47,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,57,-1,51,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,57,-1,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,59,-1,-1,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,76,-1,61,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,65,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,67,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,70,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,71,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,72,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,74,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,73,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,75,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,78,-1,77,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,79,-1,77,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,79,-1,-1,80,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,81,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,82,-1,-1,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,83,-1,-1,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,83,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,73,-1,-1,-1},
				{-1,81,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,86,86,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,87,-1,-1,91,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,88,-1,-1,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,89,-1,-1,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,90,-1,-1,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,90,-1,-1,91,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,92,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,93,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,94,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,-1,-1,-1,91,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,73,-1,-1,-1},
				{-1,96,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				{-1,97,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,75,-1,-1,-1},
				{-1,97,-1,-1,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,75,-1,-1,-1},
				{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		};
		return state_table[new_state][new_char];
	}
	/*
	 * 0 error, 1 MA, 2 HR
	 */
	int action(int new_state, int new_char){
		int action_table[][] = {    
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0},
				{1,1,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{1,1,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
				{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2},
				{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2},
				{2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2},
				{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2},
				{2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
		};
		return action_table[new_state][new_char];
	}
	/*	
	 * 1 ID, 2 int, 3 real, 4 $, 5 LT, 6 SN, 7 DF, 8 SL, 9 CT, 10 SO, 11 CO
	 */
	int look_up(int new_state, int new_char){
		int look_up_table[][] = { 
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
				{10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{10,10,10,10,10,10,10,10,10,10,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},
				{10,10,10,10,10,10,10,10,10,10,10,10,0,0,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{0,0,10,10,10,10,10,0,10,10,10,10,10,10,0,10,10,10,10,10,0,10,10,10,10,10,10,10,10},
				{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
				{10,10,10,10,10,10,10,10,10,10,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
				{10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,0,10,10,10,0,10,10,10,10,10,10,10,10,10},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
				{9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
				{0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
				{0,0,10,10,10,10,10,0,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
				{10,0,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
				{4,0,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
				{4,0,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
				{4,0,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
				{4,0,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
				{10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{3,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{2,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
				{6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
				{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3},
				{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{2,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{3,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{3,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3},
				{3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{10,10,10,10,10,10,10,10,10,10,1,1,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
				{2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3},
				{3,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3},
				{12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12},
		};
		return look_up_table[new_state][new_char];
	}
	
	
}
